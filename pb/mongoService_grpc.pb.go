// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.11
// source: mongoService.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CatFactService_GetFacts_FullMethodName = "/catfactService.CatFactService/GetFacts"
)

// CatFactServiceClient is the client API for CatFactService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatFactServiceClient interface {
	GetFacts(ctx context.Context, in *GetFactsRequest, opts ...grpc.CallOption) (*GetFactsResponse, error)
}

type catFactServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCatFactServiceClient(cc grpc.ClientConnInterface) CatFactServiceClient {
	return &catFactServiceClient{cc}
}

func (c *catFactServiceClient) GetFacts(ctx context.Context, in *GetFactsRequest, opts ...grpc.CallOption) (*GetFactsResponse, error) {
	out := new(GetFactsResponse)
	err := c.cc.Invoke(ctx, CatFactService_GetFacts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatFactServiceServer is the server API for CatFactService service.
// All implementations must embed UnimplementedCatFactServiceServer
// for forward compatibility
type CatFactServiceServer interface {
	GetFacts(context.Context, *GetFactsRequest) (*GetFactsResponse, error)
	mustEmbedUnimplementedCatFactServiceServer()
}

// UnimplementedCatFactServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCatFactServiceServer struct {
}

func (UnimplementedCatFactServiceServer) GetFacts(context.Context, *GetFactsRequest) (*GetFactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFacts not implemented")
}
func (UnimplementedCatFactServiceServer) mustEmbedUnimplementedCatFactServiceServer() {}

// UnsafeCatFactServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatFactServiceServer will
// result in compilation errors.
type UnsafeCatFactServiceServer interface {
	mustEmbedUnimplementedCatFactServiceServer()
}

func RegisterCatFactServiceServer(s grpc.ServiceRegistrar, srv CatFactServiceServer) {
	s.RegisterService(&CatFactService_ServiceDesc, srv)
}

func _CatFactService_GetFacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatFactServiceServer).GetFacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatFactService_GetFacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatFactServiceServer).GetFacts(ctx, req.(*GetFactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CatFactService_ServiceDesc is the grpc.ServiceDesc for CatFactService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatFactService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catfactService.CatFactService",
	HandlerType: (*CatFactServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFacts",
			Handler:    _CatFactService_GetFacts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mongoService.proto",
}
